plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id "io.freefair.lombok" version "6.3.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = project.mod_version
group = project.maven_group

repositories {
    // OmegaConfig
    maven {
        url "https://jitpack.io"
    }

    // Cardinal Components API
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }

    // Apache Commons
    maven {
        url "https://mvnrepository.com/artifact"
    }

    // Brigadier for commands
    maven {
        url "https://libraries.minecraft.net"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    // Omega Config
    include("com.github.Draylar.omega-config:omega-config-base:${project.omega_config_version}")
    modImplementation("com.github.Draylar.omega-config:omega-config-base:${project.omega_config_version}")

    // Cardinal Components API

    // Entity Module
    // Replace modImplementation with modApi if you expose components in your own API
    modImplementation "dev.onyxstudios.cardinal-components-api:${project.cardinal_components_module}:${project.cardinal_components_version}"
    // Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
    include "dev.onyxstudios.cardinal-components-api:${project.cardinal_components_module}:${project.cardinal_components_version}"

    // Base module
    // Replace modImplementation with modApi if you expose components in your own API
    modImplementation "dev.onyxstudios.cardinal-components-api:${project.cardinal_components_basemodule}:${project.cardinal_components_version}"
    // Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
    include "dev.onyxstudios.cardinal-components-api:${project.cardinal_components_basemodule}:${project.cardinal_components_version}"


    // Apache Commons
    implementation "org.apache.commons:commons-math3:${project.apache_commons_version}"
    include "org.apache.commons:commons-math3:${project.apache_commons_version}"

    // Brigadier for commands
    implementation "com.mojang:brigadier:${project.brigadier_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
